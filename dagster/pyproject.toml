[tool.poetry]
name = "giga-dagster"
version = "0.1.0"
description = ""
authors = ["Thinking Machines <hello@thinkingmachin.es>"]
readme = "../docs/README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
scipy = ">=1.10.0"
cryptography = ">=42.0.4"
sentry-sdk = "^1.35.0"
openpyxl = "^3.1.2"
loguru = "^0.7.2"
icecream = "^2.1.3"
azure-communication-email = "^1.0.0"
msgraph-sdk = "^1.2.0"
msgraph-beta-sdk = "^1.2.0"

[tool.poetry.group.dagster.dependencies]
dagster-webserver = "^1.6.0"
dagster_docker = "^0.22.0"
dagster-postgres = "^0.22.0"
dagster-pyspark = "^0.22.0"
dagster-k8s = "^0.22.0"

[tool.poetry.group.pipelines.dependencies]
dagster = "^1.6.0"
pendulum = "^3.0.0"
azure-storage-blob = "^12.17.0"
azure-storage-file-datalake = "^12.13.1"
pytest-cov = "4.0.0"
azure-identity = "^1.14.0"
geopy = "^2.4.0"
h3 = "^3.7.6"
fastparquet = "^2023.8.0"
grpcio-status = "^1.59.0"
acryl-datahub = { extras = ["azure-ad"], version = "^0.12.0.1" }
shapely = "^2.0.2"
geopandas = "^0.14.1"
thefuzz = "^0.20.0"
country-converter = "^1.1.1"
sqlalchemy = "^2.0.28"
psycopg2-binary = "^2.9.9"
cuid2 = "^2.0.0"
pydantic = { extras = ["email"], version = "<2.0.0" }
msgraph-sdk = "^1.2.0"
unidecode = "^1.3.8"

[tool.poetry.group.spark.dependencies]
pyspark = "3.5.0"
delta-spark = "3.0.0"
deltalake = "0.12.0"
pyarrow = "11.0.0"
pyarrow-hotfix = "^0.5"
roapi = "0.9.0"

[tool.poetry.group.notebook.dependencies]
ipython = "^8.15.0"
jupyterlab = "^4.0.8"
jupyter = "^1.0.0"
notebook = "^7.0.6"

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.4"
ipython = "^8.22.2"
mypy = "^1.9.0"
pylint = "^3.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.dagster]
module_name = "src.definitions"

[tool.ruff]
target-version = "py311"

[tool.ruff.lint]
select = ["E", "W", "F", "I", "C", "B", "UP"]
ignore = ["E203", "E266", "E501", "E402", "C408"]
#select = ["ALL"]
#ignore = [
#    "E203", "E266", "E501", "E402", "C408", "ERA",
#    "PD901", "D", "EM", "TRY003", "G001", "G002", "G003", "G004",
#    "S603", "S607", "TRY201", "TRY400", "ANN001", "ANN002", "ANN003",
#    "RUF013", "PLR0913", "ANN101", "RET503", "DTZ007",
#    "FIX002", "TD002", "TD003", "COM812", "T201", "BLE001",
#    "TRY301",
#]
task-tags = ["TODO", "FIXME", "HACK"]
ignore-init-module-imports = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id", "license"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"
banned-module-level-imports = ["numpy"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator"]

[tool.bandit]
tests = [
    "B324",
    "B501", 'B502', "B503", "B504", "B505", "B506", "B507", "B508", "B509",
    "B602", "B604", "B605", "B606", "B608", "B609"
]

[tool.mypy]
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
allow_redefinition = true
implicit_reexport = true

[tool.pylint.main]
jobs = 0
persistent = true
disable = [
    "C0103", "C0201", "C0301", "C0415",
    "C0114", "C0115", "C0116",
    "C0411",
    "R0901", "R0902", "R0903", "R0913", "R0914",
    "W0212", "W0237", "W0511", "W0602", "W0621", "W0622", "W0718", "W0719",
    "similarities"
]
ignored-modules = ["pydantic"]

[tool.pylint.format]
max-line-length = 120
