version: '3'

dotenv:
  - ./dagster/.env
  - ./oauth2-proxy/.env
  - ./spark/.env
  - ./hive/.env

env:
  COMMIT_SHA:
    sh: git rev-parse --short HEAD

vars:
  PROJECT_NAME: giga-dataops_dagster

tasks:
  default:
    cmds:
      - task: up

  up:
    desc: Build and start Docker containers
    cmds:
      - docker compose --project-name giga-dataops-platform --file docker-compose-network.yaml up --build --detach --remove-orphans {{.CLI_ARGS}}
      - docker compose --project-name {{.PROJECT_NAME}} up --build --detach --remove-orphans {{.CLI_ARGS}}

  setup:
    desc: Run all first-time setup tasks
    cmds:
      - task: setup-pre-commit
      - task: setup-helm-repos
      - task: setup-dagster

  setup-pre-commit:
    desc: Run first-time setup tasks for pre-commit
    cmds:
      - pip install -U pre-commit
      - pre-commit install --install-hooks -t pre-commit -t commit-msg

  setup-dagster:
    desc: Run first-time setup tasks for Dagster
    dir: dagster
    internal: true
    cmds:
      - poetry env use 3.11
      - poetry install --with dev,dagster,pipelines,spark,notebook --no-root

  setup-helm-repos:
    desc: Register all Helm chart repositories
    internal: true
    dir: infra/helm
    cmds:
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - helm repo add dagster https://dagster-io.github.io/helm
      - helm repo update
      - helm dependency update ./hive-metastore

  logs:
    desc: Attach to Docker logs
    cmds:
      - docker compose --project-name {{.PROJECT_NAME}} logs --follow {{.CLI_ARGS}}

  stop:
    desc: Stop containers
    cmds:
      - docker compose --project-name {{.PROJECT_NAME}} stop {{.CLI_ARGS}}

  restart:
    desc: Restart containers
    cmds:
      - docker compose --project-name {{.PROJECT_NAME}} restart {{.CLI_ARGS}}

  exec:
    desc: Run a command in the specified container
    cmds:
      - docker compose --project-name {{.PROJECT_NAME}} exec {{.CLI_ARGS}}

  ps:
    desc: Show running processes in this project
    cmds:
      - docker compose --project-name {{.PROJECT_NAME}} ps

  clean:
    desc: Remove containers
    cmds:
      - docker compose --project-name {{.PROJECT_NAME}} down --volumes --remove-orphans {{.CLI_ARGS}}

  build-and-push:
    desc: Build and push Docker image
    cmds:
      - task: build
      - task: push

  build:
    desc: Build Docker image
    cmds:
      - docker build --tag {{.DAGSTER_IMAGE_REPOSITORY}}:{{.COMMIT_SHA}} -f dagster/prod.Dockerfile dagster
      - docker build --tag {{.DAGSTER_AUTHPROXY_IMAGE_REPOSITORY}}:{{.COMMIT_SHA}} -f oauth2-proxy/prod.Dockerfile oauth2-proxy
      - docker build --tag {{.SPARK_IMAGE_REGISTRY}}/{{.SPARK_IMAGE_REPOSITORY}}:{{.COMMIT_SHA}} -f spark/prod.Dockerfile .
      - docker build --tag {{.HMS_IMAGE_REPOSITORY}}:{{.COMMIT_SHA}} -f hive/prod.Dockerfile hive

  push:
    desc: Push Docker image to container registry
    cmds:
      - docker push {{.DAGSTER_IMAGE_REPOSITORY}}:{{.COMMIT_SHA}}
      - docker push {{.DAGSTER_AUTHPROXY_IMAGE_REPOSITORY}}:{{.COMMIT_SHA}}
      - docker push {{.SPARK_IMAGE_REGISTRY}}/{{.SPARK_IMAGE_REPOSITORY}}:{{.COMMIT_SHA}}
      - docker push {{.HMS_IMAGE_REPOSITORY}}:{{.COMMIT_SHA}}

  helm-up:
    desc: Install/upgrade Helm charts to a K8s cluster running on localhost
    dir: infra
    cmds:
      - kubectl apply -f k8s/namespace.yaml
      - kubectl apply -f k8s/secrets.yaml --namespace giga-dagster
      - kubectl apply -f k8s/configmap.local.yaml --namespace giga-dagster
      - task: helm-up-hms
      - task: helm-up-spark
      - task: helm-up-dagster
      - task: helm-up-authproxy

  helm-upi:
    desc: Install/upgrade Helm charts to a K8s cluster with configured HTTPS ingress
    dir: infra
    cmds:
      - kubectl apply -f k8s/namespace.yaml
      - kubectl apply -f k8s/secrets.yaml --namespace giga-dagster
      - kubectl apply -f k8s/configmap.yaml --namespace giga-dagster
      - task: helm-up-hms
      - task: helm-up-spark-ing
      - task: helm-up-dagster
      - task: helm-up-authproxy-ing

  helm-up-dagster:
    desc: Install/upgrade Dagster Helm chart
    dir: infra/helm
    internal: true
    cmds:
      - >
        helm upgrade --install dagster dagster/dagster
        --version 1.6.8
        --namespace giga-dagster
        --values dagster/values.yaml
        --set dagster-user-deployments.deployments[0].image.repository={{.DAGSTER_IMAGE_REPOSITORY}}
        --set-string dagster-user-deployments.deployments[0].image.tag={{.COMMIT_SHA}}
        --set pipelineRun.image.repository={{.DAGSTER_IMAGE_REPOSITORY}}
        --set pipelineRun.image.tag={{.COMMIT_SHA}}
        --set postgresql.postgresqlUsername={{.POSTGRESQL_USERNAME}}
        --set postgresql.postgresqlPassword={{.POSTGRESQL_PASSWORD}}
        --set postgresql.readinessProbe.enabled=false
        --set postgresql.livenessProbe.enabled=false

  helm-up-authproxy:
    desc: Install/upgrade authproxy Helm chart
    dir: infra/helm
    internal: true
    cmds:
      - >
        helm upgrade --install dagster-authproxy ./oauth2-proxy
        --namespace giga-dagster
        --set image.repository={{.DAGSTER_AUTHPROXY_IMAGE_REPOSITORY}}
        --set-string image.tag={{.COMMIT_SHA}}
        --set service.type=LoadBalancer
        --set config.clientIdRef.secretRef=giga-dagster-authproxy-secrets
        --set config.clientSecretRef.secretRef=giga-dagster-authproxy-secrets
        --set config.tenantIdRef.secretRef=giga-dagster-authproxy-secrets

  helm-up-authproxy-ing:
    desc: Install/upgrade authproxy Helm chart
    dir: infra/helm
    internal: true
    cmds:
      - >
        helm upgrade --install dagster-authproxy ./oauth2-proxy
        --namespace giga-dagster
        --set image.repository={{.DAGSTER_AUTHPROXY_IMAGE_REPOSITORY}}
        --set-string image.tag={{.COMMIT_SHA}}
        --set config.clientIdRef.secretRef=giga-dagster-authproxy-secrets
        --set config.clientSecretRef.secretRef=giga-dagster-authproxy-secrets
        --set config.tenantIdRef.secretRef=giga-dagster-authproxy-secrets
        --set ingress.enabled=true
        --set ingress.annotations=null
        --set ingress.hosts[0]={{.DAGSTER_INGRESS_HOST}}

  helm-up-spark:
    desc: Install/upgrade Spark Helm chart
    dir: infra/helm
    internal: true
    cmds:
      - >
        helm upgrade --install spark bitnami/spark
        --version 8.1.6
        --namespace giga-dagster
        --values spark/values.yaml
        --set image.registry={{.SPARK_IMAGE_REGISTRY}}
        --set image.repository={{.SPARK_IMAGE_REPOSITORY}}
        --set-string image.tag={{.COMMIT_SHA}}
        --set service.type=LoadBalancer

  helm-up-spark-ing:
    desc: Install/upgrade Spark Helm chart
    dir: infra/helm
    internal: true
    cmds:
      - >
        helm upgrade --install spark bitnami/spark
        --version 8.1.6
        --namespace giga-dagster
        --values spark/values.yaml
        --set image.registry={{.SPARK_IMAGE_REGISTRY}}
        --set image.repository={{.SPARK_IMAGE_REPOSITORY}}
        --set-string image.tag={{.COMMIT_SHA}}
        --set ingress.enabled=true
        --set ingress.hostname={{.SPARK_INGRESS_HOST}}

  helm-up-hms:
    desc: Install/upgrade Hive Metastore Helm chart
    dir: infra/helm
    internal: true
    cmds:
      - >
        helm upgrade --install hive-metastore ./hive-metastore
        --namespace giga-dagster
        --set image.repository={{.HMS_IMAGE_REPOSITORY}}
        --set-string image.tag={{.COMMIT_SHA}}
        --set postgresql.primary.readinessProbe.enabled=false
        --set postgresql.primary.livenessProbe.enabled=false

  helm-down:
    desc: Uninstall Helm charts
    ignore_error: true
    cmds:
      - helm uninstall dagster-authproxy --namespace giga-dagster
      - helm uninstall dagster --namespace giga-dagster
      - helm uninstall spark --namespace giga-dagster
      - helm uninstall hive-metastore --namespace giga-dagster

  helm-clean:
    desc: Clean K8s resources
    dir: infra
    cmds:
      - kubectl delete pvc --all --namespace giga-dagster
      - kubectl delete all --all --namespace giga-dagster
      - kubectl delete -f k8s/namespace.yaml

  python:
    desc: >
      Run a Python module inside the Dagster container.
      Usage: `task python -- dotted.path.of.module`
    cmds:
      - task exec -- -it dagster-webserver poetry run python -m {{.CLI_ARGS}}

  ipython:
    desc: Spawn an IPython shell inside the Dagster container
    cmds:
      - task exec -- -it dagster-webserver poetry run ipython

  beeline:
    desc: Spawn a Beeline shell
    cmds:
      - task exec -- -it hive-metastore beeline -u {{.HMS_DATABASE_URL}} -n {{.HMS_POSTGRESQL_USERNAME}} -p {{.HMS_POSTGRESQL_PASSWORD}}
