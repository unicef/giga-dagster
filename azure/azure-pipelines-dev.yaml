trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  containerRegistryServiceConnection: $(ACR_SERVICE_CONNECTION)
  kubernetesServiceConnection: $(KUBERNETES_SERVICE_CONNECTION)
  kubernetesNamespace: $(KUBERNETES_NAMESPACE)
  postgresqlUsername: $(POSTGRESQL_USERNAME)
  postgresqlPassword: $(POSTGRESQL_PASSWORD)
  azureSasToken: $(AZURE_SAS_TOKEN)
  azureSasUrl: $(AZURE_SAS_URL)
  system.debug: true

steps:
  - task: Bash@3
    displayName: Get short commit hash
    inputs:
      targetType: inline
      script: "SHORT_SHA=`git rev-parse --short HEAD`"
      workingDirectory: $(Build.SourcesDirectory)

  - task: Docker@2
    displayName: Login to container Registry
    inputs:
      command: login
      containerRegistry: $(containerRegistryServiceConnection)

  - task: Docker@2
    displayName: Build and push image to container registry
    inputs:
      command: buildAndPush
      repository: giga-dagster
      dockerfile: $(Build.SourcesDirectory)/Dockerfile.prod
      containerRegistry: $(containerRegistryServiceConnection)
      tags: |
        $(Build.SourceVersion)

  - task: Kubernetes@1
    displayName: Create configmap
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      configurationType: configuration
      command: apply
      configuration: $(Build.SourcesDirectory)/infra/k8s/configmap.yaml

  - task: Kubernetes@1
    displayName: Create secret
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      configurationType: inline
      command: apply
      inline: |
        apiVersion: v1
        kind: Secret
        metadata:
          name: giga-dagster
          labels:
            app: giga-dagster
        stringData:
          AZURE_BLOB_SAS_TOKEN: "$(azureSasToken)"
          AZURE_BLOB_SAS_HOST: "$(azureSasUrl)"
          POSTGRESQL_USERNAME: "$(postgresqlUsername)"
          POSTGRESQL_PASSWORD: "$(postgresqlPassword)"

  - task: HelmDeploy@0
    displayName: Add Dagster Helm Repo
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      command: repo
      arguments: add dagster https://dagster-io.github.io/helm
      namespace: $(kubernetesNamespace)

  - task: HelmDeploy@0
    displayName: Helm deploy Dagster
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      command: upgrade
      chartType: Name
      chartName: dagster/dagster
      releaseName: dagster
      namespace: $(kubernetesNamespace)
      valuesFile: $(Build.SourcesDirectory)/infra/helm/values.yaml
      arguments: |
        --set dagster-user-deployments.deployments[0].image.repository="$(containerRegistryServiceConnection).azurecr.io/giga-dagster" \
        --set dagster-user-deployments.deployments[0].image.tag=$SHORT_SHA \
        --set pipelineRun.image.repository="$(containerRegistryServiceConnection).azurecr.io/giga-dagster" \
        --set pipelineRun.image.tag=$SHORT_SHA \
        --set postgresql.postgresqlUsername=$(postgresqlUsername) \
        --set postgresql.postgresqlPassword=$(postgresqlPassword)
