trigger:
  branches:
    include:
      - main

pr: none

pool:
  vmImage: ubuntu-latest

variables:
  containerRegistryName: $(ACR_NAME)
  containerRegistryServiceConnection: $(ACR_SERVICE_CONNECTION)
  kubernetesEnvironment: $(KUBERNETES_ENVIRONMENT)
  kubernetesNamespace: $(KUBERNETES_NAMESPACE)
  postgresqlUsername: $(POSTGRESQL_USERNAME)
  postgresqlPassword: $(POSTGRESQL_PASSWORD)
  azureSasToken: $(AZURE_SAS_TOKEN)
  azureBlobSasHost: $(AZURE_BLOB_SAS_HOST)
  azureDfsSasHost: $(AZURE_DFS_SAS_HOST)
  azureBlobContainerName: $(AZURE_BLOB_CONTAINER_NAME)
  azureStorageAccountName: $(AZURE_STORAGE_ACCOUNT_NAME)
  azureAdTenantId: $(AZURE_TENANT_ID)
  azureAdClientId: $(AZURE_CLIENT_ID)
  azureAdClientSecret: $(AZURE_CLIENT_SECRET)
  azureAdTenantName: $(AZURE_TENANT_NAME)
  azureAdPolicyName: $(AZURE_AUTH_POLICY_NAME)
  azureAdRedirectUri: $(AZURE_REDIRECT_URI)
  azureAdLogoutRedirectUri: $(AZURE_LOGOUT_REDIRECT_URI)
  secretKey: $(AUTHPROXY_SECRET_KEY)
  datahubAccessToken: $(DATAHUB_ACCESS_TOKEN)
  sparkRpcAuthSecret: $(SPARK_RPC_AUTHENTICATION_SECRET)
  system.debug: true

stages:
  - stage: Deploy
    displayName: Deploy Dagster
    jobs:
      - deployment: Deploy
        displayName: Dagster Deployment
        environment: $(kubernetesEnvironment)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: Docker@2
                  displayName: Login to container Registry
                  inputs:
                    command: login
                    containerRegistry: $(ACR_SERVICE_CONNECTION)

                - task: Docker@2
                  displayName: Build and push Dagster image to container registry
                  inputs:
                    command: buildAndPush
                    repository: giga-dagster
                    dockerfile: $(Build.SourcesDirectory)/dagster/prod.Dockerfile
                    containerRegistry: $(ACR_SERVICE_CONNECTION)
                    tags: |
                      $(Build.SourceVersion)

                - task: Docker@2
                  displayName: Build and push authproxy image to container registry
                  inputs:
                    command: buildAndPush
                    repository: giga-dagster-authproxy
                    dockerfile: $(Build.SourcesDirectory)/authproxy/prod.Dockerfile
                    containerRegistry: $(ACR_SERVICE_CONNECTION)
                    tags: |
                      $(Build.SourceVersion)

                - task: Kubernetes@1
                  displayName: Create configmap
                  inputs:
                    namespace: $(kubernetesNamespace)
                    configurationType: configuration
                    command: apply
                    useConfigurationFile: true
                    configuration: $(Build.SourcesDirectory)/infra/k8s/configmap.yaml

                - task: Kubernetes@1
                  displayName: Create secret
                  inputs:
                    namespace: $(kubernetesNamespace)
                    configurationType: inline
                    command: apply
                    useConfigurationFile: true
                    inline: |
                      apiVersion: v1
                      kind: Secret
                      metadata:
                        name: giga-dagster
                        labels:
                          app: giga-dagster
                      stringData:
                        POSTGRESQL_USERNAME: "$(postgresqlUsername)"
                        POSTGRESQL_PASSWORD: "$(postgresqlPassword)"
                        SECRET_KEY: "$(secretKey)"
                        AZURE_SAS_TOKEN: "$(azureSasToken)"
                        AZURE_STORAGE_ACCOUNT_NAME: "$(azureStorageAccountName)"
                        AZURE_BLOB_SAS_HOST: "$(azureBlobSasHost)"
                        AZURE_DFS_SAS_HOST: "$(azureDfsSasHost)"
                        AZURE_BLOB_CONTAINER_NAME: "$(azureBlobContainerName)"
                        AZURE_TENANT_ID: "$(azureAdTenantId)"
                        AZURE_CLIENT_ID: "$(azureAdClientId)"
                        AZURE_CLIENT_SECRET: "$(azureAdClientSecret)"
                        AZURE_TENANT_NAME: "$(azureAdTenantName)"
                        AZURE_AUTH_POLICY_NAME: "$(azureAdPolicyName)"
                        AZURE_REDIRECT_URI: "$(azureAdRedirectUri)"
                        AZURE_LOGOUT_REDIRECT_URI: "$(azureAdLogoutRedirectUri)"
                        DATAHUB_ACCESS_TOKEN: "$(datahubAccessToken)"
                        KUBERNETES_NAMESPACE: "$(kubernetesNamespace)"
                        SPARK_RPC_AUTHENTICATION_SECRET: "$(sparkRpcAuthSecret)"
                        SHORT_SHA: "$(Build.SourceVersion)"

                - task: HelmDeploy@0
                  displayName: Add Dagster Helm Repo
                  inputs:
                    command: repo
                    arguments: add dagster https://dagster-io.github.io/helm
                    namespace: $(kubernetesNamespace)

                - task: HelmDeploy@0
                  displayName: Helm deploy Dagster
                  inputs:
                    command: upgrade
                    install: true
                    chartType: Name
                    chartName: dagster/dagster
                    releaseName: dagster
                    namespace: $(kubernetesNamespace)
                    arguments: >
                      --values $(Build.SourcesDirectory)/infra/helm/dagster/values.yaml
                      --set dagster-user-deployments.deployments[0].image.repository="$(containerRegistryName).azurecr.io/giga-dagster"
                      --set dagster-user-deployments.deployments[0].image.tag=$(Build.SourceVersion)
                      --set pipelineRun.image.repository="$(containerRegistryName).azurecr.io/giga-dagster"
                      --set pipelineRun.image.tag=$(Build.SourceVersion)
                      --set postgresql.postgresqlUsername=$(postgresqlUsername)
                      --set postgresql.postgresqlPassword=$(postgresqlPassword)

                - task: HelmDeploy@0
                  displayName: Helm deploy authproxy
                  inputs:
                    command: upgrade
                    install: true
                    chartType: FilePath
                    chartPath: $(Build.SourcesDirectory)/infra/helm/authproxy
                    releaseName: dagster-authproxy
                    namespace: $(kubernetesNamespace)
                    arguments: >
                      --set image.repository="$(containerRegistryName).azurecr.io/giga-dagster-authproxy"
                      --set image.tag=$(Build.SourceVersion)
                      --set ingress.enabled=true
