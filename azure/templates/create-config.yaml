jobs:
  - deployment: Deploy
    displayName: Create/update K8s configuration resources
    environment: $(kubernetesEnvironment)
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: Kubernetes@1
              displayName: Create configmap
              inputs:
                namespace: $(kubernetesNamespace)
                configurationType: configuration
                command: apply
                useConfigurationFile: true
                configuration: $(Build.SourcesDirectory)/infra/k8s/configmap.yaml

            - task: Kubernetes@1
              displayName: Create Dagster secrets
              inputs:
                namespace: $(kubernetesNamespace)
                configurationType: inline
                command: apply
                useConfigurationFile: true
                inline: |
                  apiVersion: v1
                  kind: Secret
                  metadata:
                    name: giga-dagster-secrets
                    labels:
                      app.kubernetes.io/name: giga-dagster
                      app.kubernetes.io/part-of: giga-dataops-platform
                      app.kubernetes.io/component: dagster
                  stringData:
                    POSTGRESQL_USERNAME: "$(postgresqlUsername)"
                    POSTGRESQL_PASSWORD: "$(postgresqlPassword)"
                    AZURE_SAS_TOKEN: "$(azureSasToken)"
                    AZURE_STORAGE_ACCOUNT_NAME: "$(azureStorageAccountName)"
                    AZURE_BLOB_CONTAINER_NAME: "$(azureBlobContainerName)"
                    AUTH_OIDC_REDIRECT_URL: "$(datahubAzureAdRedirectUrl)"
                    AUTH_OIDC_CLIENT_ID: "$(azureAdClientId)"
                    AUTH_OIDC_TENANT_ID: "$(azureAdTenantId)"
                    AUTH_OIDC_CLIENT_SECRET: "$(datahubAzureAdClientSecret)"
                    AAD_B2C_CLIENT_ID: "$(aadB2cClientId)"
                    AAD_B2C_CLIENT_SECRET: "$(aadB2cClientSecret)"
                    AAD_B2C_TENANT_ID: "$(aadB2cTenantId)"
                    DATAHUB_ACCESS_TOKEN: "$(datahubAccessToken)"
                    DATAHUB_KUBERNETES_NAMESPACE: "$(kubernetesNamespace)"
                    SPARK_RPC_AUTHENTICATION_SECRET: "$(sparkRpcAuthSecret)"
                    COMMIT_SHA: "$(Build.SourceVersion)"
                    DEPLOY_ENV: "$(deployEnv)"
                    SENTRY_DSN: "$(sentryDsn)"
                    AZURE_EMAIL_CONNECTION_STRING: "$(azureEmailConnectionString)"
                    AZURE_EMAIL_SENDER: "$(azureEmailSender)"
                    EMAIL_RENDERER_BEARER_TOKEN: "$(emailRendererBearerToken)"
                    EMAIL_RENDERER_SERVICE_URL: "$(emailRendererServiceUrl)"
                    EMAIL_TEST_RECIPIENTS: '$(emailTestRecipients)'
                    INGESTION_POSTGRESQL_USERNAME: "$(ingestionPortalPostgresqlUsername)"
                    INGESTION_POSTGRESQL_PASSWORD: "$(ingestionPortalPostgresqlPassword)"
                    INGESTION_POSTGRESQL_DATABASE: "$(ingestionPortalPostgresqlDatabase)"

            - task: Kubernetes@1
              displayName: Create Datahub external service
              inputs:
                namespace: $(kubernetesNamespace)
                configurationType: inline
                command: apply
                useConfigurationFile: true
                inline: |
                  apiVersion: v1
                  kind: Service
                  metadata:
                    name: datahub-gms-external
                    labels:
                      app.kubernetes.io/name: giga-dagster
                      app.kubernetes.io/part-of: giga-dataops-platform
                      app.kubernetes.io/component: dagster
                  spec:
                    type: ExternalName
                    externalName: "datahub-datahub-gms.io-datahub-$(deployEnv).svc.cluster.local"
                    ports:
                      - port: 8080
                        targetPort: 8080
                        protocol: TCP        

            - task: Kubernetes@1
              displayName: Create ingestion portal database external service
              inputs:
                namespace: $(kubernetesNamespace)
                configurationType: inline
                command: apply
                useConfigurationFile: true
                inline: |
                  apiVersion: v1
                  kind: Service
                  metadata:
                    name: ingestion-portal-database-external
                    labels:
                      app.kubernetes.io/name: giga-dagster
                      app.kubernetes.io/part-of: giga-dataops-platform
                      app.kubernetes.io/component: dagster
                  spec:
                    type: ExternalName
                    externalName: "ingestion-portal-postgresql.ictd-ooi-ingestionportal-$(deployEnv).svc.cluster.local"
                    ports:
                      - port: 5432
                        targetPort: 5432
                        protocol: TCP    

            - task: Kubernetes@1
              displayName: Create authproxy secrets
              inputs:
                namespace: $(kubernetesNamespace)
                configurationType: inline
                command: apply
                useConfigurationFile: true
                inline: |
                  apiVersion: v1
                  kind: Secret
                  metadata:
                    name: giga-dagster-authproxy-secrets
                    labels:
                      app.kubernetes.io/name: giga-dagster-oauth2-proxy
                      app.kubernetes.io/part-of: giga-dataops-platform
                      app.kubernetes.io/component: dagster
                  stringData:
                    AZURE_TENANT_ID: "$(azureAdTenantId)"
                    AZURE_CLIENT_ID: "$(azureAdClientId)"
                    AZURE_CLIENT_SECRET: "$(azureAdClientSecret)"
                    AZURE_REDIRECT_URI: "https://$(appDomain)/auth/callback"
                    cookie-secret: "$(cookieSecret)"
                    client-id: "$(azureAdClientId)"
                    client-secret: "$(azureAdClientSecret)"
                    OAUTH2_PROXY_AZURE_TENANT: "$(azureAdTenantId)"
                    OAUTH2_PROXY_REDIRECT_URL: "https://$(appDomain)/auth/callback"
                    OAUTH2_PROXY_OIDC_ISSUER_URL: "https://login.microsoftonline.com/$(azureAdTenantId)/v2.0"

            - task: Kubernetes@1
              displayName: Create Spark secrets
              inputs:
                namespace: $(kubernetesNamespace)
                configurationType: inline
                command: apply
                useConfigurationFile: true
                inline: |
                  apiVersion: v1
                  kind: Secret
                  metadata:
                    name: giga-dagster-spark-secrets
                    labels:
                      app.kubernetes.io/name: giga-dagster-spark
                      app.kubernetes.io/part-of: giga-dataops-platform
                      app.kubernetes.io/component: dagster
                  stringData:
                    SPARK_RPC_AUTHENTICATION_SECRET: "$(sparkRpcAuthSecret)"
                    rpc-authentication-secret: "$(sparkRpcAuthSecret)"
                    SPARK_SSL_NEED_CLIENT_AUTH: "yes"
                    SPARK_PUBLIC_DNS: "io-dagster-$(deployEnv).unitst.org"
                    SPARK_UI_PROXYBASE: "/spark"

            - task: Kubernetes@1
              displayName: Create Hive Metastore secrets
              inputs:
                namespace: $(kubernetesNamespace)
                configurationType: inline
                command: apply
                useConfigurationFile: true
                inline: |
                  apiVersion: v1
                  kind: Secret
                  metadata:
                    name: giga-dagster-hive-secrets
                    labels:
                      app.kubernetes.io/name: giga-dagster-hive-metastore
                      app.kubernetes.io/part-of: giga-dataops-platform
                      app.kubernetes.io/component: dagster
                  stringData:
                      METASTORE_WAREHOUSE_DIR: "wasbs://$(azureBlobContainerName)@$(azureStorageAccountName).blob.core.windows.net/warehouse"
                      AZURE_SAS_TOKEN: "$(azureSasTokenEscaped)"
                      STORAGE_ACCOUNT_NAME: "$(azureStorageAccountName)"
                      STORAGE_CONTAINER_NAME: "$(azureBlobContainerName)"
                      HMS_POSTGRESQL_USERNAME: "$(hmsPostgresqlUsername)"
                      HMS_POSTGRESQL_PASSWORD: "$(hmsPostgresqlPassword)"
                      HMS_POSTGRESQL_DATABASE: "metastore_db"

            - task: Kubernetes@1
              displayName: Create Dagster webserver PDB/HPA
              condition: or(eq(variables.deployEnv, 'stg'), eq(variables.deployEnv, 'prd'))
              inputs:
                namespace: $(kubernetesNamespace)
                configurationType: configuration
                command: apply
                useConfigurationFile: true
                configuration: infra/k8s/dagster-prd.yaml
